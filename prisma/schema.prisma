generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Wages {
  Id           Int     @id @default(autoincrement())
  staffId      Int?
  month        Int?
  wage         Float?
  year         Int?
  totalBills   Int?
  bonusPerBill Float?
  staff        Staffs? @relation(fields: [staffId], references: [Id], onDelete: Cascade)

  @@index([staffId], map: "Wages_staffId_fkey")
}

model Advertisements {
  Id          Int        @id @default(autoincrement())
  title       String?
  detail      String?    @db.VarChar(1000)
  imageName   String?
  imagePath   String?
  discount    Int?       @default(0)
  endDate     DateTime?  @default(now())
  startDate   DateTime?  @default(now())
  voucherCode String?
  amount      Int?       @default(0)
  Bookings    Bookings[]
}

model Notifications {
  Id          Int       @id @default(autoincrement())
  name        String?
  message     String?
  customerId  Int?
  status      Boolean?  @default(false)
  createdAt   DateTime? @default(now())
  bookingDate DateTime?
  toUser      Int?      @default(0)
}

model RefreshTokens {
  Id           Int     @id @default(autoincrement())
  refreshToken String? @db.VarChar(1000)
}

model Departments {
  Id        Int      @id @default(autoincrement())
  name      String
  managerId Int?
  isDeleted Boolean? @default(false)
  staffs    Staffs[]
}

model Roles {
  Id        Int      @id @default(autoincrement())
  name      String
  isDeleted Boolean? @default(false)
  staffs    Staffs[]
}

model Staffs {
  Id           Int         @id @default(autoincrement())
  name         String?
  phone        String      @unique
  address      String?
  password     String?
  imagePath    String?
  birthday     DateTime?
  gender       Boolean?    @default(false)
  description  String?     @db.VarChar(1000)
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @default(now())
  roleId       Int
  departmentId Int
  isDeleted    Boolean?    @default(false)
  imageName    String?
  basicWage    Float?
  department   Departments @relation(fields: [departmentId], references: [Id], onDelete: Cascade)
  role         Roles       @relation(fields: [roleId], references: [Id], onDelete: Cascade)
  bills        Bills[]
  bookings     Bookings[]
  wages        Wages[]

  @@index([departmentId], map: "Staffs_departmentId_fkey")
  @@index([roleId], map: "Staffs_roleId_fkey")
}

model CustomerTypes {
  Id          Int         @id @default(autoincrement())
  name        String
  percent     Int?
  description String?     @db.VarChar(1000)
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now())
  isDeleted   Boolean?    @default(false)
  customers   Customers[]
}

model Customers {
  Id                Int           @id @default(autoincrement())
  name              String?
  phone             String        @unique
  address           String?
  password          String?
  imagePath         String?
  isCustomerCreated Boolean?      @default(false)
  point             Int?
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @default(now())
  customerTypeId    Int
  birthday          DateTime?
  gender            Boolean?      @default(false)
  isDeleted         Boolean?      @default(false)
  imageName         String?
  customerType      CustomerTypes @relation(fields: [customerTypeId], references: [Id], onDelete: Cascade)
  bills             Bills[]
  bookings          Bookings[]
  rates             Rates[]

  @@index([customerTypeId], map: "Customers_customerTypeId_fkey")
}

model Rates {
  Id         Int       @id @default(autoincrement())
  rate       Int
  comment    String?   @db.VarChar(1000)
  createdAt  DateTime? @default(now())
  customerId Int
  bookingId  Int       @unique
  booking    Bookings  @relation(fields: [bookingId], references: [Id], onDelete: Cascade)
  customer   Customers @relation(fields: [customerId], references: [Id], onDelete: Cascade)

  @@index([customerId], map: "Rates_customerId_fkey")
}

model Bookings {
  Id              Int             @id @default(autoincrement())
  date            DateTime?
  timeSlot        String?
  note            String?
  status          String?
  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @default(now())
  createdBy       Int?
  staffId         Int
  customerId      Int
  updatedBy       Int?
  isDeleted       Boolean?        @default(false)
  advertisementId Int?
  advertisement   Advertisements? @relation(fields: [advertisementId], references: [Id])
  customer        Customers       @relation(fields: [customerId], references: [Id], onDelete: Cascade)
  staff           Staffs          @relation(fields: [staffId], references: [Id], onDelete: Cascade)
  bill            Bills?
  details         Details[]
  rate            Rates?

  @@index([customerId], map: "Bookings_customerId_fkey")
  @@index([staffId], map: "Bookings_staffId_fkey")
  @@index([advertisementId], map: "Bookings_advertisementId_fkey")
}

model Details {
  Id        Int       @id @default(autoincrement())
  bookingId Int?
  serviceId Int?
  billId    Int?
  bill      Bills?    @relation(fields: [billId], references: [Id], onDelete: Cascade)
  booking   Bookings? @relation(fields: [bookingId], references: [Id], onDelete: Cascade)
  service   Services? @relation(fields: [serviceId], references: [Id], onDelete: Cascade)

  @@index([billId], map: "Details_billId_fkey")
  @@index([bookingId], map: "Details_bookingId_fkey")
  @@index([serviceId], map: "Details_serviceId_fkey")
}

model Bills {
  Id         Int       @id @default(autoincrement())
  price      Int?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  createdBy  Int?
  staffId    Int
  customerId Int
  bookingId  Int?      @unique
  booking    Bookings? @relation(fields: [bookingId], references: [Id])
  customer   Customers @relation(fields: [customerId], references: [Id])
  staff      Staffs    @relation(fields: [staffId], references: [Id])
  details    Details[]

  @@index([customerId], map: "Bills_customerId_fkey")
  @@index([staffId], map: "Bills_staffId_fkey")
}

model ServiceTypes {
  Id        Int        @id @default(autoincrement())
  name      String?
  isDeleted Boolean?   @default(false)
  services  Services[]
}

model Services {
  Id            Int          @id @default(autoincrement())
  price         Int?
  name          String?
  imagePath     String?
  serviceTypeId Int
  description   String?      @db.VarChar(1000)
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @default(now())
  isDeleted     Boolean?     @default(false)
  imageName     String?
  serviceType   ServiceTypes @relation(fields: [serviceTypeId], references: [Id], onDelete: Cascade)
  details       Details[]

  @@index([serviceTypeId], map: "Services_serviceTypeId_fkey")
}
